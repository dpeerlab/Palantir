[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "palantir"
version = "1.4.0"
description = "Palantir for modeling continuous cell state and cell fate choices in single cell data"
authors = [
    {name = "Palantir development team", email = "manu.talanki@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Development Status :: 5 - Production/Stable",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Visualization",
]
dependencies = [
    "numpy>=1.14.2",
    "pandas>=0.22.0",
    "scipy>=1.3",
    "networkx>=2.1",
    "scikit-learn",
    "joblib",
    "fcsparser>=0.1.2",
    "leidenalg>=0.9.1",
    "matplotlib>=2.2.2",
    "anndata>=0.8.0",
    "scanpy>=1.6.0",
    "mellon>=1.3.0",
]

[project.optional-dependencies]
gam = [
    "pygam",
]

full = [
    "pygam",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "h5py",
]

[project.urls]
Homepage = "https://github.com/dpeerlab/palantir"
"Bug Tracker" = "https://github.com/dpeerlab/palantir/issues"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.coverage.run]
source = ["palantir"]
omit = [
    "tests/*",
    "*/config.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "def _return_cell",
    "print"
]